data(Indometh)
library(ggplot2)
ggplot(data = Indometh, aes(x= time, y = conc)) +
geom_point()
vec <- c(1, 3, 'tr', 4)
class(vec)
v1 <- mtcars[(mtcars$mpg > 21 &
(mtcars$wt >= 2.620 & mtcars$wt <= 3.215) &
mtcars$am == 1) |
(mtcars$cyl == 6 &
as.logical(mtcars$hp %% 2)), ]
v2 <- mtcars[mtcars$mpg > 21 &
mtcars$wt >= 2.620 & mtcars$wt <= 3.215 &
(mtcars$am == 1 |
mtcars$cyl == 6) &
as.logical(mtcars$hp %% 2), ]
v3 <- mtcars[(mtcars$mpg > 21 &
(mtcars$wt >= 2.620 & mtcars$wt <= 3.215) &
mtcars$am == 1) |
(mtcars$cyl == 6 &
is.odd(mtcars$hp)), ]
v4 <- mtcars[mtcars$mpg > 21 &
mtcars$wt >= 2.620 & mtcars$wt <= 3.215 &
mtcars$am == 1 |
mtcars$cyl == 6 &
as.logical(mtcars$hp %% 2), ]
v5 <- mtcars[(mtcars$mpg > 21 and
v1 == v2
v1 == v3
v1 == v4
v2 == v4
ggplot(data = CO2, aes(x = Type, y = CO2$uptake, filll = Type)) +
geom_boxplot() +
facet_grid(~ Treatment +
labs(x = "Место произрастания", y = "Потребление CO2",
title = "Потребление растениями углекислого газа")
)
data(CO2)
library(ggplot2)
ggplot(data = CO2, aes(x = Type, y = CO2$uptake, filll = Type)) +
geom_boxplot() +
facet_grid(~ Treatment +
labs(x = "Место произрастания", y = "Потребление CO2",
title = "Потребление растениями углекислого газа")
)
data(CO2)
library(ggplot2)
ggplot(data = CO2, aes(x = Type, y = CO2$uptake, fill = Type)) +
labs(x = "Место произрастания", y = "Потребление CO2", title = "Потребление растениями углекислого газа")
data(CO2)
str(CO2)
install.packages("ape")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
getwd()
library(ape)
t <- read.tree(file = "yeast_strains.newick")
plot.phylo(t)
library(ggtree)
t <- read.tree(file = "yeast_strains.newick")
ggtree(t) + geom_tiplab() + theme_tree2()
library(ape)
t <- read.tree(file = "yeast_strains.newick")
plot.phylo(t)
library(ggtree)
t <- read.tree(file = "yeast_strains.newick")
ggtree(t) + geom_tiplab() + theme_tree2()
library(ggtree)
t <- read.tree(file = "yeast_strains.newick")
ggtree(t) + geom_tiplab() + theme_tree2()
library(ape)
t <- read.tree(file = "yeast_strains.newick")
plot.phylo(t)
Lake <- LakeHuron
Lake <- LakeHuron
summa < sum(Lake)
summa <-  sum(Lake)
len <- length(Lake)
mean <- summa / len
summa / 98
median <- median(Lake)
setwd("C:/Users/keyfi/Documents/Bioinf_Institute/R")
library(readr)
Life_expectancy <- read_csv("Life expectancy.csv")
View(Life_expectancy)
df <- Life_expectancy
df
library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
data <- read.csv("Life expectancy.csv")
# На примере одной переменной давайте взглянем, какие графики мы можем строить
# Этот, например, показывает сглаженную версию нашего распределения
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_density()
# На примере одной переменной давайте взглянем, какие графики мы можем строить
# Этот, например, показывает сглаженную версию нашего распределения
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_density()
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_histogram()
# Обратите внимание, здесь указано количество, а не частота событий
# Давайте обратимся к справке, чтобы узнать как это можно исправить при необходимости
?geom_histogram
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
data <- read.csv("Life expectancy.csv")
# На примере одной переменной давайте взглянем, какие графики мы можем строить
# Этот, например, показывает сглаженную версию нашего распределения
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_density()
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
# Обратите внимание, здесь указано количество, а не частота событий
# Давайте обратимся к справке, чтобы узнать как это можно исправить при необходимости
?geom_histogram
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
data <- read.csv("Life expectancy.csv")
# На примере одной переменной давайте взглянем, какие графики мы можем строить
# Этот, например, показывает сглаженную версию нашего распределения
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_density()
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
2/7
3/8
#
#-------------------------------------------------------------------------
# Начнём с дискретных распределений, где мы имеем дело с целыми числами значений
# Пример!
# Мы бросаем монетку 3 раза, как часто мы ожидаем встретить 3 орла? А 2?
# 000 001 010 011 100 101 110 111
# Если вы подзабыли что такое сочетания и вероятности, то рекомендую обратиться к курсу Яндекс.Практикума
# https://practicum.yandex.ru/math-foundations/
# Он бесплатный :)
#
dbinom(x=3, size=3, p=0.5) # ответ на первый вопрос
dbinom(x=2, size=3, p=0.5) # ответ на второй вопрос
# Посмотрим на график такого распределения
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
a
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=100000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 8)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=10000, size=10, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 11)
ggplot(a, aes(x=a, after_stat(density))) +
geom_density(bins = 11)
ggplot(a, aes(x=a, after_stat(density))) +
geom_density()
a <-  rbinom(n=10000, size=10, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 11)
a <-  rbinom(n=1000000, size=100, prob=0.05)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = dim(unique(a))[1])
# Давайте расчитаем среднее и дисперсию нашего простого примера с монеткой и 3 бросками
# 0 3 0.125
# 1 2 0.375
mean_coin = 0*0.125 + 1 * 0.375 + 2 * 0.375 + 3 * 0.125
mean_coin
var_coin <- (0-1.5) ** 2 * 0.125 + (1-1.5) ** 2 * 0.375 + (2-1.5) ** 2 * 0.375 + (3-1.5) ** 2 * 0.125
var_coin
pbinom(5, size=100, p=0.05)
# Если обобщить то среднее равно n * p 3 * 0.5 = 1.5
# Дисперсия n * p * (p-1) или 3 * 0.5 * 0.5 = 0.75
# Предположим, что известно, что 5% взрослых, принимающих определенное лекарство, испытывают негативные побочные эффекты.
# Исходя из биномиального распределения мы можем рассчитать вероятность того, что более определенного
# числа пациентов в случайной выборке из 100 будут испытывать негативные побочные эффекты.
1 - pbinom(5, size=100, p=0.05)
# Посчитайте для 10 и 15 человек в выборке
1 - pbinom(5, size=100, p=0.1)
1 - pbinom(5, size=100, p=0.15)
# Посчитайте для 10 и 15 человек в выборке
1 - pbinom(10, size=100, p=0.05)
1 - pbinom(15, size=100, p=0.05)
5!
!5
!1
b <-  rpois(n=100000, lambda = 3)
b <- as.data.frame(b)
ggplot(b, aes(x=b, after_stat(density))) +
geom_histogram(bins = dim(unique(b))[1])
e^(-lambda)*lambda^k / k!
exp(-3) * 3 ** 6 / factor(6)
e^(-lambda)*lambda^k / k!
e^(-lambda)*lambda^k / k!
dpois(6,3)
exp(-3) * 3 ** 6 / factorial(6)
dpois(6,3) + dpois(5,3) + dpois(4,3) + dpois(3,3) + dpois(2,3) + dpois(1,3) + dpois(0,3)
ppois(6,3)
1 - ppois(6,3)
#-------------------------------------------------------------------------
# Перейдём к случаю, когда наши данные не являются целыми числами.
# И таких ситуаций довольно много, рост, вес, размер листа и тд и тп
# В таких случаях мы должны перейти к непрерывным распределениям
# Рассмотрим наиболее известное Нормальное распределение
# Сразу к примеру, потом формально опишем его
?LakeHuron
c <- as.data.frame(LakeHuron)
ggplot(c,aes(x)) +
geom_density()
# Теперь красивый пример
d <- rnorm(10000)
d <- as.data.frame(d)
ggplot(d,aes(d)) +
geom_density()
# В данном случае это стандартное нормальное распределение, среднее = 0, стандартное отклонение 1
# Давайте рассчитаем вероятности нескольких важных точек
pnorm(0) # по умолчанию параметры распределения соответствуют стандартному норм. распределению
# Теперь повторим для точек -1,-2,-3
pnorm(-1)
pnorm(-2)
pnorm(-3)
ggplot(d,aes(d)) +
geom_density() +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1)) +
geom_vline(aes(xintercept = 2)) +
geom_vline(aes(xintercept = 3)) +
annotate(geom = "text", x = 0.5, y = 0.5, label = "34,13%")+
annotate(geom = "text", x = 1.5, y = 0.5, label = "13,59%")+
annotate(geom = "text", x = 2.5, y = 0.5, label = "2,14%")+
annotate(geom = "text", x = 3.5, y = 0.5, label = "0,13%")
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron$x)
c <- as.data.frame(LakeHuron)
ggplot(c,aes(x)) +
geom_density()
# Теперь красивый пример
d <- rnorm(10000)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(c)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(c$x)
lake_sd <- sd(c$x)
e <- rnorm(200000, mean = lake_mean, sd = lake_sd)
e <- as.data.frame(e)
ggplot()+
geom_density(data=c,aes(x=x),colour="#ff0000") +
geom_density(data=e,aes(x=e))
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
pnorm(585, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(585, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(mean_lake, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(lake_mean, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(585, mean = lake_mean, sd = lake_sd)
d <- rnorm(200000)
d <- as.data.frame(d)
d1 <- slice_sample(d,n=20)
d2 <- slice_sample(d,n=10)
d3 <- slice_sample(d,n=15)
d4 <- slice_sample(d,n=25)
d5 <- rbind(d1,d2,d3,d4) # сумма этих выборок
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d1,aes(x=d),colour="#671c15")+
geom_density(data=d2,aes(x=d),colour="#a83e1b")+
geom_density(data=d3,aes(x=d),colour="#e8c238")+
geom_density(data=d4,aes(x=d),colour="#2ca128")+
geom_density(data=d5,aes(x=d),colour="#0000ff")
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d5,aes(x=d),colour="#0000ff")
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d1,aes(x=d),colour="#671c15")+
geom_density(data=d2,aes(x=d),colour="#a83e1b")+
geom_density(data=d3,aes(x=d),colour="#e8c238")+
geom_density(data=d4,aes(x=d),colour="#2ca128")+
geom_density(data=d5,aes(x=d),colour="#0000ff")
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=100000000000, size=1000, prob=0.5)
a <-  rbinom(n=100000000, size=100, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 100)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 100)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
