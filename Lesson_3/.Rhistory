library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
setosa <- filter(iris_2, Species == "setosa")$Sepal.Width
virginica <- filter(iris_2, Species == "virginica")$Sepal.Width
iris_2 <- filter(iris, Species != "versicolor")
setosa <- filter(iris_2, Species == "setosa")$Sepal.Width
virginica <- filter(iris_2, Species == "virginica")$Sepal.Width
# df = ((s1**2 / n1 + s2**2 / n2)**2) / (s1**2/n1)**2 / n1-1 + (s2**2/n2)**2 / n2-1
n1 <- length(setosa)
n2 <- length(virginica)
var(setosa)
var(virginica)
df <- ((var(setosa))**2 / n1 + (var(virginica))**2 / n2)**2 / (((var(setosa))**2) / (n1-1) + (var(virginica))**2) / (n2-1)
s1 <- var(setosa)
s2 <- var(virginica)
dfree <- (((s1**2 / n1 + s2**2 / n2)**2)) / ((s1**2/n1)**2 / n1-1 + (s2**2/n2)**2 / n2-1)
s1n <- s1**2 / n1
s2n <- s2**2 / n2
dfree <- (s1n + s2n)**2 / (s1n / ((n1-1))**2 + s2n / (n2-1))
dfree <- (s1n + s2n)**2 / ((s1n)**2 / ((n1-1))**2 + (s2n)**2 / (n2-1))
(s1**2 / n1) + (s2**2 / n2)
df1 <- ((s1**2 / n1) + (s2**2 / n2))**2
((s1**2 / n1)**2 / (n-1)) + ((s2**2 / n2)**2 / (n2-1))
df2 <- ((s1**2 / n1)**2 / (n1-1)) + ((s2**2 / n2)**2 / (n2-1))
((s1**2 / n1)**2 / (n1-1)) + ((s2**2 / n2)**2 / (n2-1))
df3 <- df1/df2
df4 <-  ((s1**2 / n1) + (s2**2 / n2))**2 / (((s1**2 / n1)**2 / (n1-1)) + (s2**2 / n2)**2 / (n2-1))
t.test(setosa, virginica)
s1n <- s1**2 / n1
s2n <- s2**2 / n2
df2 <- (s1n / (n1-1) + (s2n / (n2-1)))
df3 <- df1 / df2
df2 <- (s1n**2 / (n1-1) + (s2n**2 / (n2-1)))
df3 <- df1 / df2
t.test(auto, manual)
# df = ((s1**2 / n1 + s2**2 / n2)**2) / (s1**2/n1)**2 / n1-1 + (s2**2/n2)**2 / n2-1
auto <- subset(mtcars, am == 0)$mpg
manual <- subset(mtcars, am == 1)$mpg
t.test(auto, manual)
df2 <- ((s1**2 / n1)**2 / (n1-1)) + ((s2**2 / n2)**2 / (n2-1))
df1 <- ((s1**2 / n1) + (s2**2 / n2)) ** 2
df <- df1/df2
df1 <- ((s1**2 / n1) + (s2**2 / n2)) ** 2
s1 <- var(auto)
s2 <- var(manual)
n1 <- 19
n2 <- 13
df1 <- ((s1**2 / n1) + (s2**2 / n2)) ** 2
df2 <- ((s1**2 / n1)**2 / (n1-1)) + ((s2**2 / n2)**2 / (n2-1))
df <- df1/df2
df3 <- df1/df2
cr <- qt(0.05 / 2, df = df3, lower.tail = FALSE)
t.test(auto, manual)
cr <- qt(0.05 / 2, df = 18.332, lower.tail = FALSE)
abs(abs(cr) - abs(score))
score <- (mean(auto) - mean(manual)) / sqrt(sd(auto)**2/length(auto) + sd(manual)**2/length(manual))
score
t.test(auto, manual)$parameter
cr <- qt(0.05 / 2, df = 18.33225, lower.tail = FALSE)
score <- (mean(auto) - mean(manual)) / sqrt(sd(auto)**2/length(auto) + sd(manual)**2/length(manual))
abs(abs(cr) - abs(score))
df3
abs(abs(cr) - abs(score))
# df = ((s1**2 / n1 + s2**2 / n2)**2) / ((s1**2/n1)**2 / n1-1 + (s2**2/n2)**2 / n2-1)
auto <- subset(mtcars, am == 0)$mpg
manual <- subset(mtcars, am == 1)$mpg
s1 <- var(auto)
s2 <- var(manual)
n1 <- 19
n2 <- 13
df1 <- ((s1**2 / n1) + (s2**2 / n2)) ** 2
df2 <- ((s1**2 / n1)**2 / (n1-1)) + ((s2**2 / n2)**2 / (n2-1))
df3 <- df1/df2
cr <- qt(0.05 / 2, df = 18.33225, lower.tail = FALSE)
score <- (mean(auto) - mean(manual)) / sqrt(sd(auto)**2/length(auto) + sd(manual)**2/length(manual))
abs(abs(cr) - abs(score))
hz <- t.test(auto, manual)
View(hz)
hz$statistic
score
df4 <- ((s1**2 / n1) + (s2**2 / n2)**2) / (((s1**2/n1)**2 / n1-1) + ((s2**2/n2)**2 / (n2-1)))
df4 <- ((s1**2 / n1) + (s2**2 / n2))**2 / (((s1**2/n1)**2 / n1-1) + ((s2**2/n2)**2 / (n2-1)))
df4 <- ((s1**2 / n1) + (s2**2 / n2))**2 / (((s1**2/n1)**2 / (n1-1)) + ((s2**2/n2)**2 / (n2-1)))
s1**2/n1
s1**2/n1)**2
(s1**2/n1)**2
(s1**2/n1)**2 / (n1-1)
(s2**2/n2)**2
s1 <- var(auto)
s2 <- var(manual)
n1 <- 19
n2 <- 13
df4 <- ((s1**2 / n1) + (s2**2 / n2))**2 / (((s1**2/n1)**2 / (n1-1)) + ((s2**2/n2)**2 / (n2-1)))
((s1**2/n1)**2 / (n1-1))
((s2**2/n2)**2 / (n2-1))
(s2**2/n2)
s2**2
(s2**2/n2)**2
((s1**2 / n1) + (s2**2 / n2))**2 / (((s1**2/n1)**2 / (n1-1)) + ((s2**2/n2)**2 / (n2-1)))
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
((qt(0.01,inf) + qt(0.8,inf)) / 10)^2 * (5^2 + 5^2)
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
((qt(0.01) + qt(0.8)) / 10)^2 * (5^2 + 5^2)
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2)
qt(0.01, Inf)
qt(0.8, Inf)
qt(0.05, Inf)
qt(0.01)
qt(0.01, Inf)
qt(0.01, Inf)
qt(0.8, Inf)
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2)
((qnorm(0.01, Inf) + qnorm(0.8, Inf)) / 10)^2 * (5^2 + 5^2)
qnorm(0.01, Inf)
pnorm(0.01, Inf)
((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2)
ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2)
answer <- ceiling(((qnorm(0.01, Inf) + qnorm(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
qnorn(0.01)
qnorm(0.01)
qt(0.01, Inf)
answer <- ceiling(((qnorm(0.01, Inf) + qnorm(0.8, Inf)) / 0.01)^2 * (0.005^2 + 0.005^2))
print(answer)
answer <- ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 0.01)^2 * (0.005^2 + 0.005^2))
print(answer)
qnorm(1 - 0.01/2)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 0.01)^2 * (0.005^2 + 0.005^2))
print(answer)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 10)^2 * (5^2 + 5^2))
print(answer)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 10/2)^2 * (5^2 + 5^2))
print(answer)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 5)^2 * (5^2 + 5^2))
print(answer)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 10)^2 * (5^2 + 5^2))
print(answer)
((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 10)^2 * (5^2 + 5^2)
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 5)^2 * (5^2 + 5^2))
print(answer)
(qt(0.05,Inf)
)
qt(0.1,Inf)
(qt(0.05,Inf) + qt(0.1,Inf))/2
((qt(0.05,Inf) + qt(0.1,Inf))/2)^2
((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
answer <- ceiling((((qt0.01) + qt(0.8)) / 5)^2 * (5^2 + 5^2))
print(answer)
answer <- ceiling(((qt(0.01) + qt(0.8)) / 10)^2 * (5^2 + 5^2))
print(answer)
qt(0.01)
qt(0.01, Inf)
qt(0.8, Inf)
(qt(0.01, Inf) + qt(0.8, Inf))
(qt(0.01, Inf) + qt(0.8, Inf)) / 10
((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2
(5^2 + 5^2)
(((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
if(!require(pwr)) {
install.packages("pwr")
library(pwr)
}
# Рассчитайте размер выборки для t-теста
result <- pwr.t.test(d = 10/5, sig.level = 0.01, power = 0.8,
type = "two.sample", alternative = "two.sided")
# Округлите результат вверх до ближайшего целого числа
n <- ceiling(result$n)
print(n)
answer <- ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
print(answer)
ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
(qt(0.01, Inf) + qt(0.8, Inf))
(qt(0.01, Inf) + qt(0.8, Inf)) / 10
(qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2
((qt(0.01, Inf) + qt(0.8, Inf))
(qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2
(qt(0.01, Inf) + qt(0.8, Inf)/ 10)
(qt(0.01, Inf) + qt(0.8, Inf))/ 10
((qt(0.01, Inf) + qt(0.8, Inf))/ 10) ^ 2
((qt(0.01, Inf) + qt(0.8, Inf))/ 10) ^ 2 * 50
answer <- ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 5)^2 * (5^2 + 5^2))
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
qt1 <- qt(0.01, Inf)
qt2 <- qt(0.8, Inf)
answer <- ((qt1 + qt2) / 10)^2 * (5^2 + 5^2)
print(answer)
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
qt1 <- qt(1- 0.01, Inf)
qt2 <- qt(1- 0.8, Inf)
answer <- ((qt1 + qt2) / 10)^2 * (5^2 + 5^2)
qt(1- 0.01, Inf)
qt(1- 0.8, Inf)
# а с другим (нашим) за 6 дней. Стандартное отклонение 1 день
# Альфа = 0.05
# Бета = 0.1
# Эффект = 2 дня
# n >= ((z(alpha) + z(beta))/MDE)^2 * (sd(x)^2+sd(y)^2)
# ((qt(0.05,Inf) + qt(0.1,Inf))/2)^2 * 2
# Рассчитайте минимальное количество наблюдений, чтобы обнаружить различие между весом яблок в 10 г  ,
# уровень значимости 0.01, мощность 0.8. стандартное отклонение равно 5 г. Округлите полученное значение
# в большую сторону до целого числа.
# sd = 5
qt1 <- qt(0.01, Inf)
qt1 <- qt(0.01, Inf)
qt2 <- qt(0.8, Inf)
answer <- ceiling(((qt(0.01, Inf) + qt(0.8, Inf)) / 10)^2 * (5^2 + 5^2))
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 5)^2 * (5^2 + 5^2))
answer <- ceiling(((qnorm(1 - 0.01/2) + qnorm(1 - 0.8/2)) / 10)^2 * (5^2 + 5^2))
result <- pwr.t.test(d = 10/5, sig.level = 0.01, power = 0.8,
type = "two.sample", alternative = "two.sided")
n <- ceiling(result$n)
data <- read.csv("used_cars_data.csv")
View(data)
SEAT <- subset(data, brand = "SEAT", model = "Ibiza")
View(SEAT)
SEAT <- subset(data, brand = "SEAT")
SEAT <- subset(data, brand == "SEAT")
SEAT <- subset(data, brand == "SEAT", model == "Ibiza")
SEAT <- subset(data, brand == "SEAT")
View(SEAT)
SEAT <- subset(subset(data, brand == "SEAT"), model == "Ibiza")
subset(data, brand == "SEAT")
subset(data, brand == "SEAT", model == "Ibiza")
subset(data, brand == "SEAT", select == "Ibiza")
subset(data, brand == "SEAT", select = "Ibiza")
View(SEAT)
opel <- subset(subset(data, brand = "Opel"), model = "Astra")
opel <- subset(subset(data, brand == "Opel"), model == "Astra")
SEAT <- subset(subset(data, brand == "SEAT"), model == "Ibiza")$price..eur.
SEAT <- subset(subset(data, brand == "SEAT"), model == "Ibiza")
opel <- subset(subset(data, brand == "Opel"), model == "Astra")
opel$price..eur/
opel$price..eur.
SEAT <- SEAT$price..eur.
SEAT <- subset(subset(data, brand == "SEAT"), model == "Ibiza")
opel <- subset(subset(data, brand == "Opel"), model == "Astra")
SEA <- SEAT$price..eur.
ope <- opel$price..eur.
tscore <- (mean(SEA) - mean(ope)) / sqrt(sd(SEA)^2/length(SEA)+sd(ope)^2/length(ope))
t.test(SEA,ope)
hz <- t.test(SEA,ope)
View(hz)
hz$parameter
tscore <- (mean(SEA) - mean(ope)) / sqrt(sd(SEA)^2/length(SEA)+sd(ope)^2/length(ope))
answer = pt(tscore,df=11.19394 ) * 2
print(answer)
hz$p.value
var(ope)
var(SEA)
length(ope)
ope
SEAT
SEA
ope
var(ope)
var(SEA)
View(hz)
