ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
data <- read.csv("Life expectancy.csv")
# На примере одной переменной давайте взглянем, какие графики мы можем строить
# Этот, например, показывает сглаженную версию нашего распределения
ggplot(data=data, aes(x=Life_Expectancy_Men))+
geom_density()
# Однако, чаще используют гистограммы, потому что их несколько легче интерпретировать
ggplot(data=data, aes(x=Life_Expectancy_Men, y=after_stat(density)))+
geom_histogram()
2/7
3/8
#
#-------------------------------------------------------------------------
# Начнём с дискретных распределений, где мы имеем дело с целыми числами значений
# Пример!
# Мы бросаем монетку 3 раза, как часто мы ожидаем встретить 3 орла? А 2?
# 000 001 010 011 100 101 110 111
# Если вы подзабыли что такое сочетания и вероятности, то рекомендую обратиться к курсу Яндекс.Практикума
# https://practicum.yandex.ru/math-foundations/
# Он бесплатный :)
#
dbinom(x=3, size=3, p=0.5) # ответ на первый вопрос
dbinom(x=2, size=3, p=0.5) # ответ на второй вопрос
# Посмотрим на график такого распределения
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
a
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=100000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
# Посмотрим на график такого распределения
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 8)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=10000, size=10, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 11)
ggplot(a, aes(x=a, after_stat(density))) +
geom_density(bins = 11)
ggplot(a, aes(x=a, after_stat(density))) +
geom_density()
a <-  rbinom(n=10000, size=10, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 11)
a <-  rbinom(n=1000000, size=100, prob=0.05)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = dim(unique(a))[1])
# Давайте расчитаем среднее и дисперсию нашего простого примера с монеткой и 3 бросками
# 0 3 0.125
# 1 2 0.375
mean_coin = 0*0.125 + 1 * 0.375 + 2 * 0.375 + 3 * 0.125
mean_coin
var_coin <- (0-1.5) ** 2 * 0.125 + (1-1.5) ** 2 * 0.375 + (2-1.5) ** 2 * 0.375 + (3-1.5) ** 2 * 0.125
var_coin
pbinom(5, size=100, p=0.05)
# Если обобщить то среднее равно n * p 3 * 0.5 = 1.5
# Дисперсия n * p * (p-1) или 3 * 0.5 * 0.5 = 0.75
# Предположим, что известно, что 5% взрослых, принимающих определенное лекарство, испытывают негативные побочные эффекты.
# Исходя из биномиального распределения мы можем рассчитать вероятность того, что более определенного
# числа пациентов в случайной выборке из 100 будут испытывать негативные побочные эффекты.
1 - pbinom(5, size=100, p=0.05)
# Посчитайте для 10 и 15 человек в выборке
1 - pbinom(5, size=100, p=0.1)
1 - pbinom(5, size=100, p=0.15)
# Посчитайте для 10 и 15 человек в выборке
1 - pbinom(10, size=100, p=0.05)
1 - pbinom(15, size=100, p=0.05)
5!
!5
!1
b <-  rpois(n=100000, lambda = 3)
b <- as.data.frame(b)
ggplot(b, aes(x=b, after_stat(density))) +
geom_histogram(bins = dim(unique(b))[1])
e^(-lambda)*lambda^k / k!
exp(-3) * 3 ** 6 / factor(6)
e^(-lambda)*lambda^k / k!
e^(-lambda)*lambda^k / k!
dpois(6,3)
exp(-3) * 3 ** 6 / factorial(6)
dpois(6,3) + dpois(5,3) + dpois(4,3) + dpois(3,3) + dpois(2,3) + dpois(1,3) + dpois(0,3)
ppois(6,3)
1 - ppois(6,3)
#-------------------------------------------------------------------------
# Перейдём к случаю, когда наши данные не являются целыми числами.
# И таких ситуаций довольно много, рост, вес, размер листа и тд и тп
# В таких случаях мы должны перейти к непрерывным распределениям
# Рассмотрим наиболее известное Нормальное распределение
# Сразу к примеру, потом формально опишем его
?LakeHuron
c <- as.data.frame(LakeHuron)
ggplot(c,aes(x)) +
geom_density()
# Теперь красивый пример
d <- rnorm(10000)
d <- as.data.frame(d)
ggplot(d,aes(d)) +
geom_density()
# В данном случае это стандартное нормальное распределение, среднее = 0, стандартное отклонение 1
# Давайте рассчитаем вероятности нескольких важных точек
pnorm(0) # по умолчанию параметры распределения соответствуют стандартному норм. распределению
# Теперь повторим для точек -1,-2,-3
pnorm(-1)
pnorm(-2)
pnorm(-3)
ggplot(d,aes(d)) +
geom_density() +
geom_vline(aes(xintercept = 0)) +
geom_vline(aes(xintercept = 1)) +
geom_vline(aes(xintercept = 2)) +
geom_vline(aes(xintercept = 3)) +
annotate(geom = "text", x = 0.5, y = 0.5, label = "34,13%")+
annotate(geom = "text", x = 1.5, y = 0.5, label = "13,59%")+
annotate(geom = "text", x = 2.5, y = 0.5, label = "2,14%")+
annotate(geom = "text", x = 3.5, y = 0.5, label = "0,13%")
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(LakeHuron$x)
c <- as.data.frame(LakeHuron)
ggplot(c,aes(x)) +
geom_density()
# Теперь красивый пример
d <- rnorm(10000)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(c)
# Окей, с основами мы разобрались, теперь давайте попробуем что-то сделать на практике
# Приблизительно, наш пример с уровнем озера подходит под нормальное распределение
# Давайте найдём параметры возможного распределения
lake_mean <- mean(c$x)
lake_sd <- sd(c$x)
e <- rnorm(200000, mean = lake_mean, sd = lake_sd)
e <- as.data.frame(e)
ggplot()+
geom_density(data=c,aes(x=x),colour="#ff0000") +
geom_density(data=e,aes(x=e))
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
pnorm(585, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(585, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(mean_lake, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(lake_mean, mean = lake_mean, sd = lake_sd)
# Исходя из полученного распределения, какова вероятность, что уровень озера будет выше 585?
1 - pnorm(585, mean = lake_mean, sd = lake_sd)
d <- rnorm(200000)
d <- as.data.frame(d)
d1 <- slice_sample(d,n=20)
d2 <- slice_sample(d,n=10)
d3 <- slice_sample(d,n=15)
d4 <- slice_sample(d,n=25)
d5 <- rbind(d1,d2,d3,d4) # сумма этих выборок
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d1,aes(x=d),colour="#671c15")+
geom_density(data=d2,aes(x=d),colour="#a83e1b")+
geom_density(data=d3,aes(x=d),colour="#e8c238")+
geom_density(data=d4,aes(x=d),colour="#2ca128")+
geom_density(data=d5,aes(x=d),colour="#0000ff")
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d5,aes(x=d),colour="#0000ff")
ggplot() +
geom_density(data=d,aes(x=d))+
geom_density(data=d1,aes(x=d),colour="#671c15")+
geom_density(data=d2,aes(x=d),colour="#a83e1b")+
geom_density(data=d3,aes(x=d),colour="#e8c238")+
geom_density(data=d4,aes(x=d),colour="#2ca128")+
geom_density(data=d5,aes(x=d),colour="#0000ff")
a <-  rbinom(n=10000, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
a <-  rbinom(n=100000000000, size=1000, prob=0.5)
a <-  rbinom(n=100000000, size=100, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 100)
a <-  rbinom(n=100, size=3, prob=0.5)
a <- as.data.frame(a)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 100)
ggplot(a, aes(x=a, after_stat(density))) +
geom_histogram(bins = 4)
count(c, 1)
result <- c(3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4)
sorted_result <- sort(result)
mean_result <- sum(result)/25
var_result <- sum((result - mean_result)**2 / 24)
p2 <- 8/25
sorted_result
c <- factorial(n) / (factorial(k) * factorial(n-k))
# P(X = k) = C(n,k) * p^k * (1-p)^n-k
# C(n,k) = n! / (k! * (n-k)!)
n = 4
k = 3
c <- factorial(n) / (factorial(k) * factorial(n-k))
p^k
p2^k
k = 2
c <- factorial(n) / (factorial(k) * factorial(n-k))
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(0.32, 6, -12, 6)
prob <- polyroot(z)
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(0.32, 6p^2, -12p^3, 6p^4)
polyroot(c(-0.32, 6, -12, 6))
polyroot(c(-0.32, 0, 6, -12, 6))
n <- 4
k <- 2
P <- 0.32
# Функция для расчета биномиальной вероятности
binom_prob <- function(p) {
choose(n, k) * p^k * (1-p)^(n-k) - P
}
# Используем uniroot для нахождения корня
root <- uniroot(binom_prob, c(0, 1))
6 * 0.638^2 * (1-0.638)^2
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(0.32, 0, 6p^2, -12p^3, 6p^4)
prob <- polyroot(z)
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(0.32, 0, 6, -12, 6)
prob <- polyroot(z)
prob
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(-0.32, 0, 6, -12, 6)
prob <- polyroot(z)
prob
result <- c(3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4)
sorted_result <- sort(result)
mean_result <- sum(result)/25
var_result <- sum((result - mean_result)**2 / 24)
p2 <- 8/25
# P(X = k) = C(n,k) * p^k * (1-p)^n-k
# C(n,k) = n! / (k! * (n-k)!)
n = 4
k = 2
c <- factorial(n) / (factorial(k) * factorial(n-k))
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(-0.32, 0, 6, -12, 6)
prob <- polyroot(z)
p <- max(prob)
prob
p <- 0.638
p <- 0.638
k3 = 3
C3 <- factorial(n) / (factorial(k3) * factorial(n-k3))
p3 <- C3 * p^k3 * p^(n-k3)
k4 = 4
C4 <- factorial(n) / (factorial(k4) * factorial(n-k4))
p4 <- C4 * p^k4 * p^(n-k4)
print(p3+p4)
for (i in 0:4){
for (i in 0:4){
print((factorial(n) / (factorial(i) * factorial(n-i))) * p^i * (1-p)^(n-i))
}
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * p^(n-i)
print(C, pi)
}
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * p^(n-i)
print(i, C, pi)
}
for (i in 0:4){
print(i)
}
for (i in 0:4){
print(i)
}
print(1)
for (i in 0:4){
print(1)
}
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * p^(n-i)
print(i, C, pi)
}
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * p^(n-i)
print(C, pi)
}
factorial(0)
C <- factorial(n) / (factorial(2) * factorial(n-2))
pi <- C * p^2 * p^(n-2)
print(C, pi)
print(pi)
6 * 0.638^2 * 0.638^2
6 * 0.638^2 * (1-0.638)^2
pi <- C * p^2 * (1-p)^(n-2)
print(pi)
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
print(C, pi)
}
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
print(pi)
}
rez = 0
for (i in 0:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
rez = rez + pi
}
print(rez)
rez = 0
for (i in 3:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
rez = rez + pi
}
print(rez)
# Предположим, что мы бросили другую монетку 4 раза и повторили это 25 раз.
# Получили такое распределение 3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4
# Определите параметры распределения. В ответе укажите вероятность того,
# что орёл выпадет больше 2 раз.
result <- c(3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4)
sorted_result <- sort(result)
mean_result <- sum(result)/25
var_result <- sum((result - mean_result)**2 / 24)
p2 <- 8/25
# P(X = k) = C(n,k) * p^k * (1-p)^n-k
# C(n,k) = n! / (k! * (n-k)!)
n = 4
k = 2
c <- factorial(n) / (factorial(k) * factorial(n-k))
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(-0.32, 0, 6, -12, 6)
prob <- polyroot(z)
p <- 0.638
for (i in 3:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
rez = rez + pi
}
print(rez)
# Предположим, что мы бросили другую монетку 4 раза и повторили это 25 раз.
# Получили такое распределение 3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4
# Определите параметры распределения. В ответе укажите вероятность того,
# что орёл выпадет больше 2 раз.
result <- c(3,0,3,3,1,2,3,3,3,1,2,3,2,1,1,2,3,2,1,2,2,3,2,3,4)
sorted_result <- sort(result)
mean_result <- sum(result)/25
var_result <- sum((result - mean_result)**2 / 24)
p2 <- 8/25
# P(X = k) = C(n,k) * p^k * (1-p)^n-k
# C(n,k) = n! / (k! * (n-k)!)
n = 4
k = 2
c <- factorial(n) / (factorial(k) * factorial(n-k))
# 0.32 = 6 * p^k * (1-p)^(n-k)
# 0.32 = 6 * p^2 * (1-p)^(2)
# 0.32 = 6 * p^2 * (1-p)*(1-p)
# 0.32 = 6p^2 * (1 - 2p + p^2)
# 0.32 = 6p^2 - 12p^3 + 6p^4
# 0 = 6p^4 - 12p^3 + 6p^2 - 0.32
z <- c(-0.32, 0, 6, -12, 6)
prob <- polyroot(z)
p <- 0.638
rez = 0
for (i in 3:4){
C <- factorial(n) / (factorial(i) * factorial(n-i))
pi <- C * p^i * (1-p)^(n-i)
rez = rez + pi
}
print(rez)
# Посчитайте для 10 и 15 человек в выборке ?
1 - pbinom(10, size=100, p=0.05)
1 - pbinom(15, size=100, p=0.05)
pbinom(15, size=100, p=0.05) - pbinom(5, size=100, p=0.05)
# Посчитайте для 10 и 15 человек в выборке ?
1 - pbinom(5, size=100, p=0.05)
1 - pbinom(15, size=100, p=0.05)
pbinom(15, size=100, p=0.05) - pbinom(5, size=100, p=0.05)
pbinom(15, size=100, p=0.05)
pbinom(5, size=100, p=0.05)
pbinom(15, size=100, p=0.05) - pbinom(5, size=100, p=0.05)
# Посчитайте для 10 и 15 человек в выборке ?
1 - pbinom(5, size=100, p=0.05)
1 - pbinom(15, size=100, p=0.05)
pbinom(15, size=100, p=0.05)
df <- read.csv('iris.peta_length.csv'')
df <- read.csv('iris.peta_length.csv'')
df <- read.csv("iris.peta_length.csv")
getwd()
library(dplyr)
library(ggplot2)
main_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(main_dir)
getwd()
df <- read.csv("iris.peta_length.csv")
df <- read.csv("iris.sepal_length.csv")
df <- read.csv("iris_sepal_length.csv")
View(df)
isl <- read.csv("iris_sepal_length.csv")
df <- c(isl$setosa + isl$versicolor + isl$virginica)
df <- c(isl$setosa) + c(isl$versicolor) + c(isl$virginica)
df <- c(isl$setosa, isl$versicolor, isl$virginica)
sd(df)
mean_df <- c/150
mean_df <- sum(df)/150
sd_df <- (sum((df-mean_df)^2)/149)
sd(df)
sd_df <- (sum((df-mean_df)^2)/149)^0.5
sd(df)
print(sd_df)
lambda <- (941 * 1 + 109 * 2) / 1050
lambda
answer <- (941 * 1 + 109 * 2) / lambda
answer
print(answer)
answer <- (1050) / lambda
print(answer)
exp(-3)*3**6 / factorial(6)
dpois(6,3)
p <- 109/1050
p
p <- 109/1159
1050/p
sd1 <- (165-163.3) / 6.7
sigma1 <- (165-163.3) / 6.7
sigma2 <- (167-163.3) / 6.7
pnorm(sigma1)
pnorm(sigma2)
pnorm(sigma1) - pnorm(sigma2)
pnorm(sigma2) - pnorm(sigma1)
